'use strict';

var gutil = require('gulp-util'),
    es = require('event-stream'),
    BufferStreams = require('bufferstreams'),
    extname = require('path').extname;

module.exports = function(selected_cms) {
    return es.map(function(file, callback) {
        var fileExt = (file.path ? extname(file.path).substr(1).toLowerCase() : '');
        if (file.isNull()) {
            // Nothing to do if no contents
            callback(null, file);
        }
        else if (file.isStream()) {
            file.contents = file.contents.pipe(new BufferStreams(function(err, buf, cb) {
                try {
                    if (err) {
                        return cb(new gutil.PluginError('gulp-remove-code', err.message));
                    }
                    cb(null, changeCode(buf, selected_cms));
                }
                catch (err) {
                    cb(new gutil.PluginError('gulp-remove-code', err.message));
                }
            }));
            callback(null, file);
        }
        else if (file.isBuffer()) {
            try {
                file.contents = changeCode(file.contents, selected_cms);
                callback(null, file);
            }
            catch (err) {
                callback(err, null);
            }
        }
    });
};
function changeCode(buffer, selected_cms) {
    var returnedContent;
    var contents = buffer.toString('utf8');
    if(selected_cms === 'drupal') {
        returnedContent = druplify(contents);
    } else if(selected_cms === 'amp'){
        returnedContent = ampify(contents);
    } else if(selected_cms === 'laravel'){
        returnedContent = laravelify(contents);
    }
    return new Buffer(returnedContent);
}
/**
 * This function is specific to add in drupal peramaters based on the input from the buffer
 */
function druplify(contents) {
    const regex = /<(cms_.*)(.\b[^>]*)\b[^>]*>((.|\n)*?)<\/\1>/g;
    let m,cmsReplace,finalMatch,cmsID,cmsType;
    if (contents.length > 0) {
        while ((m = regex.exec(contents)) !== null) {
            let target = contents.match(regex).length;
            for(let i=0;i< target;i++){
                //This is necessary to avoid infinite loops with zero-width matches
                if (m.index === regex.lastIndex) {
                    regex.lastIndex++;
                }    
                // The result can be accessed through the `m`-variable.
                m.forEach((match, groupIndex) => {
                    if(groupIndex == 0){
                        cmsReplace = match;
                    }
                    else if(groupIndex == 1) {
                        cmsID = match;
                    }
                    else if(groupIndex == 2) {
                        cmsType = match.split('"')[1];
                        // provide the final replacment variables 
                        if(cmsType == "cmsImage") {
                            finalMatch = '<img src="<?php echo $'+cmsID+'?>" alt="<?php echo $'+cmsID+'_alt ?>" width="100%" height="100%" />'; 
                        } else if(cmsType == "cmsLink") {
                            finalMatch = '<a href="<?php $'+cmsID+' ?>"><?php echo $'+cmsID+'_text ?></a>'; 
                        } else {
                            finalMatch = '<?php echo $'+cmsID+' ?>'; 
                        }
                        //contents = contents.replace(regex,'a');
                        contents = contents.replace(cmsReplace,finalMatch);
                    }
                });
                return contents;
            }
        }
    }
}

/**
 * This function adds in the amp specific code that is required for the project 
 */
function ampify(contents) {

    var input = contents; 
    // intilize regex array 
    var regexArr = ['<html.*>','<img.*>','<meta.*>'];
    if (input.length > 0) {
        // loop through regex array items
        for (var i=0, l=regexArr.length; i<l; i++) {
            // while there is input that has not been searched run loop
            input = checkRegex(regexArr[i], input);
        }
        return input;
    }
}
function checkRegex(inputRegex, input) {
    var m,finalMatch,ampReplace,langReplace;
    var regex = new RegExp(inputRegex);
    while ((m = regex.exec(input)) !== null) {
        let target = input.match(regex).length;
        for(let i=0;i< target;i++) {
            //This is necessary to avoid infinite loops with zero-width matches
            if (m.index === regex.lastIndex) {
                regex.lastIndex++;
            }    
            // The result can be accessed through the `m`-variable.
            m.forEach((match,groupIndex) => {
                if(inputRegex === '<html.*>') {
                    var res = match.split(" ");
                    finalMatch = '<html amp '+res[1];
                }else if(inputRegex === '<img.*>'){
                    var res = match.split(" ");
                    var text ="";
                    res.forEach(function(item,index){
                        item = item.replace("/>", ">");
                        if(index != 0){
                            text +=" "+item;
                        }
                    });
                    finalMatch =  '<amp-img'+text+'</amp-img>';
                }else if(inputRegex === '<meta.*>'){
                    finalMatch = '<meta charset="utf-8">\n\t<script async src="https://cdn.ampproject.org/v0.js"></script>';
                }
                input = input.replace(match,finalMatch);
            });
        }
        return input;
    }
    return input;
}